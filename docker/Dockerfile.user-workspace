# ML Training Server - User Workspace Container
# This container behaves like a full VM with desktop, dev tools, and ML stack

FROM nvidia/cuda:12.4.0-devel-ubuntu22.04

# Build arguments for version configuration
ARG PYCHARM_VERSION=2024.1
ARG JULIA_VERSION=1.10.0

# Prevent interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive

# Set locale
RUN apt-get update && apt-get install -y locales && \
    locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8

#==============================================================================
# SHARED CACHE CONFIGURATION
#==============================================================================
# Configure APT to use shared cache directory (mounted at runtime)
# This allows all users to benefit from cached .deb packages
RUN rm -f /etc/apt/apt.conf.d/docker-clean && \
    echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

#==============================================================================
# SYSTEM PACKAGES
#==============================================================================

RUN apt-get update && apt-get install -y \
    # Core utilities
    sudo curl wget git vim nano htop tmux screen \
    build-essential cmake pkg-config \
    software-properties-common apt-transport-https \
    ca-certificates gnupg lsb-release \
    # Networking
    net-tools iputils-ping dnsutils \
    openssh-server rsync \
    # Compression
    zip unzip p7zip-full \
    # System monitoring
    sysstat iotop nethogs \
    # Development tools
    gdb valgrind strace \
    # Version control
    git-lfs subversion mercurial \
    # Shells
    zsh fish \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# DESKTOP ENVIRONMENT (KDE Plasma - Lightweight)
#==============================================================================

RUN apt-get update && apt-get install -y \
    # KDE Plasma Desktop
    kde-plasma-desktop plasma-workspace-wayland \
    # Essential KDE apps
    konsole dolphin kate okular gwenview \
    # Display server
    xorg x11-xserver-utils \
    # Audio
    pulseaudio pulseaudio-utils pavucontrol \
    # Fonts
    fonts-noto fonts-noto-color-emoji \
    fonts-liberation fonts-dejavu \
    # File manager integration
    kio-extras \
    # System settings
    systemsettings \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# REMOTE ACCESS SERVICES - VNC + XRDP
#==============================================================================

# Install TigerVNC server and XRDP
# Features:
#  - TigerVNC: High-performance VNC server for Guacamole integration
#  - XRDP: RDP protocol support for Windows-native remote desktop
#  - Both accessible through Apache Guacamole web interface
#  - Hardware-accelerated via VirtualGL for GPU applications
#  - Audio support via PulseAudio
#  - Clipboard sharing
#  - File transfer via Guacamole

RUN apt-get update && apt-get install -y \
    tigervnc-standalone-server tigervnc-common \
    xrdp \
    dbus-x11 \
    x11vnc \
    novnc websockify \
    && rm -rf /var/lib/apt/lists/*

# Configure VNC server
RUN mkdir -p /etc/vnc && \
    echo "session=plasma" > /etc/vnc/xstartup && \
    echo "unset SESSION_MANAGER" >> /etc/vnc/xstartup && \
    echo "unset DBUS_SESSION_BUS_ADDRESS" >> /etc/vnc/xstartup && \
    echo "exec startplasma-x11" >> /etc/vnc/xstartup && \
    chmod +x /etc/vnc/xstartup

# Configure XRDP
RUN echo "startplasma-x11" > /etc/xrdp/startwm.sh && \
    chmod +x /etc/xrdp/startwm.sh && \
    sed -i 's/max_bpp=32/max_bpp=24/' /etc/xrdp/xrdp.ini && \
    sed -i 's/#tcp_send_buffer_bytes=32768/tcp_send_buffer_bytes=4194304/' /etc/xrdp/xrdp.ini && \
    sed -i 's/#tcp_recv_buffer_bytes=32768/tcp_recv_buffer_bytes=6291456/' /etc/xrdp/xrdp.ini

# Users can connect via:
#  - Apache Guacamole web interface (primary method, browser-based)
#  - Kasm Workspaces (alternative, containerized streaming)
#  - Direct VNC client (port 5900+)
#  - Direct RDP client (port 3389)
#  - noVNC HTML5 client (port 6080+)

#==============================================================================
# DEVELOPMENT TOOLS
#==============================================================================

# Install code-server (VS Code in browser)
RUN curl -fsSL https://code-server.dev/install.sh | sh

# Install Node.js and npm
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn pnpm

# Install Python build dependencies
RUN apt-get update && apt-get install -y \
    python3-dev python3-pip python3-venv \
    libpython3-dev python3-setuptools \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# ML/DATA SCIENCE STACK
#==============================================================================

# Install Python ML libraries
# Note: pip cache will be persisted to /cache/pip (mounted at runtime)
RUN pip3 install \
    # Deep Learning
    torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 \
    tensorflow[and-cuda] \
    jax[cuda12] \
    # Data Science
    numpy pandas scipy scikit-learn \
    matplotlib seaborn plotly \
    jupyter jupyterlab ipywidgets \
    notebook \
    # ML Tools
    transformers accelerate \
    datasets \
    tensorboard \
    wandb \
    mlflow \
    # Computer Vision
    opencv-python-headless pillow \
    albumentations \
    # NLP
    spacy nltk gensim \
    # Utilities
    tqdm rich click typer \
    pyyaml toml \
    requests httpx \
    # Development
    pytest pytest-cov black flake8 mypy \
    ipdb pudb \
    # Jupyter extensions
    jupyterlab-git jupyterlab-lsp \
    python-lsp-server

# Install JupyterLab extensions
RUN pip3 install \
    jupyterlab-vim \
    jupyterlab-code-formatter \
    jupyterlab-spreadsheet-editor && \
    jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build && \
    jupyter lab build --dev-build=False --minimize=True

#==============================================================================
# IDE & EDITORS
#==============================================================================

# Install PyCharm Community (headless for now, can be accessed via desktop)
RUN wget -q https://download.jetbrains.com/python/pycharm-community-${PYCHARM_VERSION}.tar.gz -O /tmp/pycharm.tar.gz && \
    tar -xzf /tmp/pycharm.tar.gz -C /opt/ && \
    mv /opt/pycharm-* /opt/pycharm && \
    rm /tmp/pycharm.tar.gz && \
    ln -s /opt/pycharm/bin/pycharm.sh /usr/local/bin/pycharm

# Install VSCodium (open source VS Code)
RUN wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg | gpg --dearmor | dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg && \
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg ] https://download.vscodium.com/debs vscodium main' | tee /etc/apt/sources.list.d/vscodium.list && \
    apt-get update && apt-get install -y codium && \
    rm -rf /var/lib/apt/lists/*

#==============================================================================
# BROWSERS & GUI APPS
#==============================================================================

RUN apt-get update && apt-get install -y \
    # Browsers
    firefox chromium-browser \
    # PDF viewers
    evince \
    # Image editors
    gimp inkscape \
    # Office suite (lightweight)
    libreoffice-writer libreoffice-calc \
    # Media player
    vlc \
    # Screenshot tools
    spectacle \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# DATABASE & TOOLS
#==============================================================================

RUN apt-get update && apt-get install -y \
    # Databases
    sqlite3 \
    postgresql-client \
    mysql-client \
    redis-tools \
    # Database GUI
    sqlitebrowser \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# CONTAINERIZATION TOOLS (Docker-in-Docker)
#==============================================================================

RUN apt-get update && apt-get install -y \
    docker.io docker-compose \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# LANGUAGE RUNTIMES
#==============================================================================

# Go
RUN wget -q https://go.dev/dl/go1.22.0.linux-amd64.tar.gz -O /tmp/go.tar.gz && \
    tar -C /usr/local -xzf /tmp/go.tar.gz && \
    rm /tmp/go.tar.gz
ENV PATH="${PATH}:/usr/local/go/bin"


# Julia (for scientific computing)
ARG JULIA_VERSION
RUN wget -q https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-${JULIA_VERSION}-linux-x86_64.tar.gz -O /tmp/julia.tar.gz && \
    tar -C /opt -xzf /tmp/julia.tar.gz && \
    ln -s /opt/julia-*/bin/julia /usr/local/bin/julia && \
    rm /tmp/julia.tar.gz

# R (for statistics)
RUN apt-get update && apt-get install -y \
    r-base r-base-dev \
    && rm -rf /var/lib/apt/lists/*

#==============================================================================
# VERSION CONTROL & COLLABORATION
#==============================================================================

RUN pip3 install \
    # Git tools
    git-review gitpython \
    # Collaboration
    jupyterlab-github \
    jupyterlab-gitlab

#==============================================================================
# SYSTEM INITIALIZATION
#==============================================================================

# Configure SSH
RUN mkdir /var/run/sshd && \
    echo 'PermitRootLogin no' >> /etc/ssh/sshd_config && \
    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config && \
    echo 'X11Forwarding yes' >> /etc/ssh/sshd_config && \
    echo 'X11UseLocalhost no' >> /etc/ssh/sshd_config

# Configure sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Create startup script
COPY entrypoint-user.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Configure systemd-like services using supervisord
# Note: supervisord.conf is generated dynamically in entrypoint.sh
RUN apt-get update && apt-get install -y supervisor && \
    rm -rf /var/lib/apt/lists/*

#==============================================================================
# ENVIRONMENT VARIABLES FOR SHARED CACHES
#==============================================================================
# These environment variables point to shared cache directories
# mounted at runtime. This allows all users to benefit from cached downloads.

# ML Models & Datasets
ENV HF_HOME=/cache/ml-models/huggingface \
    TRANSFORMERS_CACHE=/cache/ml-models/huggingface \
    HF_DATASETS_CACHE=/cache/ml-models/datasets \
    TORCH_HOME=/cache/ml-models/torch \
    TFHUB_CACHE_DIR=/cache/ml-models/tensorflow-hub

# Python packages
ENV PIP_CACHE_DIR=/cache/pip

# Conda packages
ENV CONDA_PKGS_DIRS=/cache/conda/pkgs

# Git LFS
ENV GIT_LFS_CACHE_DIR=/cache/git-lfs

# Language-specific caches
ENV GOMODCACHE=/cache/go/pkg/mod \
    npm_config_cache=/cache/npm \
    CARGO_HOME=/cache/cargo \
    JULIA_DEPOT_PATH=/cache/julia \
    R_LIBS_USER=/cache/R/packages

# Container build cache
ENV BUILDKIT_CACHE=/cache/buildkit

# JetBrains IDEs
ENV PYCHARM_CONFIG_PATH=/cache/jetbrains/config \
    PYCHARM_PLUGINS_PATH=/cache/jetbrains/plugins \
    PYCHARM_SYSTEM_PATH=/cache/jetbrains/system

#==============================================================================
# CONTAINER METADATA
#==============================================================================

# Expose all necessary ports
EXPOSE 22      # SSH (for terminal access and SSH tunneling)
EXPOSE 5900    # VNC server (for Guacamole)
EXPOSE 3389    # XRDP server (RDP protocol)
EXPOSE 6080    # noVNC HTML5 client (websockify)
EXPOSE 8080    # code-server
EXPOSE 8888    # Jupyter
EXPOSE 6006    # TensorBoard

# Set working directory
WORKDIR /workspace

# Default command
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
